import React, { useState } from 'react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Badge } from '@/components/ui/badge';
import Icon from '@/components/ui/icon';

const LiveChat = () => {
  const [isOpen, setIsOpen] = useState(false);
  const [isMinimized, setIsMinimized] = useState(false);
  const [message, setMessage] = useState('');
  const [messages, setMessages] = useState([
    {
      id: 1,
      sender: 'operator',
      name: '–ê–Ω–∞—Å—Ç–∞—Å–∏—è',
      text: '–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –ú–µ–Ω—è –∑–æ–≤—É—Ç –ê–Ω–∞—Å—Ç–∞—Å–∏—è, —è –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç –∫–æ–º–ø–∞–Ω–∏–∏ –†–µ–º–æ–Ω—Ç–ü—Ä–æ. –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?',
      time: '14:32',
      avatar: 'üë©‚Äçüíº'
    }
  ]);

  const quickReplies = [
    '–£–∑–Ω–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å —Ä–µ–º–æ–Ω—Ç–∞',
    '–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ', 
    '–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∑–∞–º–µ—Ä',
    '–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å'
  ];

  const handleSendMessage = () => {
    if (!message.trim()) return;
    
    const newMessage = {
      id: messages.length + 1,
      sender: 'user',
      name: '–í—ã',
      text: message,
      time: new Date().toLocaleTimeString('ru-RU', { hour: '2-digit', minute: '2-digit' }),
      avatar: 'üë§'
    };
    
    setMessages([...messages, newMessage]);
    setMessage('');

    setTimeout(() => {
      const response = {
        id: messages.length + 2,
        sender: 'operator',
        name: '–ê–Ω–∞—Å—Ç–∞—Å–∏—è',
        text: '–ë–ª–∞–≥–æ–¥–∞—Ä—é –∑–∞ –≤–∞—à –≤–æ–ø—Ä–æ—Å! –ù–∞—à —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–∏–µ 5 –º–∏–Ω—É—Ç.',
        time: new Date().toLocaleTimeString('ru-RU', { hour: '2-digit', minute: '2-digit' }),
        avatar: 'üë©‚Äçüíº'
      };
      setMessages(prev => [...prev, response]);
    }, 1000);
  };

  const handleQuickReply = (reply: string) => {
    const newMessage = {
      id: messages.length + 1,
      sender: 'user',
      name: '–í—ã',
      text: reply,
      time: new Date().toLocaleTimeString('ru-RU', { hour: '2-digit', minute: '2-digit' }),
      avatar: 'üë§'
    };
    
    setMessages([...messages, newMessage]);

    setTimeout(() => {
      let responseText = '–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –∏–Ω—Ç–µ—Ä–µ—Å!';
      if (reply.includes('—Å—Ç–æ–∏–º–æ—Å—Ç—å')) {
        responseText = '–î–ª—è —Ä–∞—Å—á–µ—Ç–∞ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ —Ä–µ–º–æ–Ω—Ç–∞ –º–Ω–µ –Ω—É–∂–Ω–æ –∑–Ω–∞—Ç—å –ø–ª–æ—â–∞–¥—å –ø–æ–º–µ—â–µ–Ω–∏—è –∏ —Ç–∏–ø —Ä–∞–±–æ—Ç. –ú–æ–∂–µ—Ç–µ –ø–æ–¥–µ–ª–∏—Ç—å—Å—è —ç—Ç–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π?';
      } else if (reply.includes('–ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ')) {
        responseText = '–í—ã –º–æ–∂–µ—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–∞—à–∏ —Ä–∞–±–æ—Ç—ã –≤ —Ä–∞–∑–¥–µ–ª–µ "–ü–æ—Ä—Ç—Ñ–æ–ª–∏–æ" –Ω–∞ —Å–∞–π—Ç–µ –∏–ª–∏ —è –º–æ–≥—É –≤—ã—Å–ª–∞—Ç—å –≤–∞–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –ø—Ä–æ–µ–∫—Ç–æ–≤.';
      } else if (reply.includes('–∑–∞–º–µ—Ä')) {
        responseText = '–û—Ç–ª–∏—á–Ω–æ! –î–ª—è –∑–∞–ø–∏—Å–∏ –Ω–∞ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –∑–∞–º–µ—Ä –º–Ω–µ –Ω—É–∂–µ–Ω –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏ —É–¥–æ–±–Ω–æ–µ –≤—Ä–µ–º—è –¥–ª—è –≤–∏–∑–∏—Ç–∞.';
      }
      
      const response = {
        id: messages.length + 2,
        sender: 'operator',
        name: '–ê–Ω–∞—Å—Ç–∞—Å–∏—è',
        text: responseText,
        time: new Date().toLocaleTimeString('ru-RU', { hour: '2-digit', minute: '2-digit' }),
        avatar: 'üë©‚Äçüíº'
      };
      setMessages(prev => [...prev, response]);
    }, 1500);
  };

  if (!isOpen) {
    return (
      <div className="fixed bottom-6 right-6 z-50">
        <Button
          size="lg"
          onClick={() => setIsOpen(true)}
          className="bg-primary hover:bg-primary/90 shadow-lg rounded-full h-16 w-16 p-0 relative"
        >
          <Icon name="MessageCircle" size={28} />
          <Badge className="absolute -top-2 -right-2 bg-red-500 text-white text-xs min-w-[20px] h-5">
            1
          </Badge>
        </Button>
      </div>
    );
  }

  return (
    <div className="fixed bottom-6 right-6 z-50">
      <Card className={`w-80 shadow-lg transition-all duration-300 ${isMinimized ? 'h-16' : 'h-96'}`}>
        <CardHeader className="bg-primary text-white p-4 cursor-pointer" onClick={() => setIsMinimized(!isMinimized)}>
          <div className="flex items-center justify-between">
            <div className="flex items-center space-x-3">
              <div className="w-8 h-8 bg-white/20 rounded-full flex items-center justify-center">
                üë©‚Äçüíº
              </div>
              <div>
                <CardTitle className="text-sm font-medium">–û–Ω–ª–∞–π–Ω –ø–æ–¥–¥–µ—Ä–∂–∫–∞</CardTitle>
                <div className="flex items-center space-x-1 text-xs">
                  <div className="w-2 h-2 bg-green-400 rounded-full"></div>
                  <span>–ê–Ω–∞—Å—Ç–∞—Å–∏—è –≤ —Å–µ—Ç–∏</span>
                </div>
              </div>
            </div>
            <div className="flex items-center space-x-2">
              <Button 
                size="sm" 
                variant="ghost" 
                className="h-8 w-8 p-0 hover:bg-white/20"
                onClick={(e) => {
                  e.stopPropagation();
                  setIsMinimized(!isMinimized);
                }}
              >
                <Icon name={isMinimized ? "ChevronUp" : "Minus"} size={16} />
              </Button>
              <Button 
                size="sm" 
                variant="ghost" 
                className="h-8 w-8 p-0 hover:bg-white/20"
                onClick={(e) => {
                  e.stopPropagation();
                  setIsOpen(false);
                }}
              >
                <Icon name="X" size={16} />
              </Button>
            </div>
          </div>
        </CardHeader>
        
        {!isMinimized && (
          <CardContent className="p-0 flex flex-col h-80">
            <div className="flex-1 overflow-y-auto p-4 space-y-3">
              {messages.map((msg) => (
                <div key={msg.id} className={`flex ${msg.sender === 'user' ? 'justify-end' : 'justify-start'}`}>
                  <div className={`flex space-x-2 max-w-[70%] ${msg.sender === 'user' ? 'flex-row-reverse space-x-reverse' : ''}`}>
                    <div className="w-8 h-8 rounded-full flex items-center justify-center bg-gray-100 text-sm">
                      {msg.avatar}
                    </div>
                    <div>
                      <div className={`rounded-lg p-3 text-sm ${
                        msg.sender === 'user' 
                          ? 'bg-primary text-white' 
                          : 'bg-gray-100 text-gray-800'
                      }`}>
                        {msg.text}
                      </div>
                      <div className="text-xs text-gray-500 mt-1">
                        {msg.time}
                      </div>
                    </div>
                  </div>
                </div>
              ))}
            </div>

            {messages.length === 1 && (
              <div className="px-4 pb-2">
                <div className="text-xs text-gray-500 mb-2">–ë—ã—Å—Ç—Ä—ã–µ –æ—Ç–≤–µ—Ç—ã:</div>
                <div className="flex flex-wrap gap-1">
                  {quickReplies.map((reply, index) => (
                    <Button
                      key={index}
                      size="sm"
                      variant="outline"
                      className="text-xs h-6 px-2"
                      onClick={() => handleQuickReply(reply)}
                    >
                      {reply}
                    </Button>
                  ))}
                </div>
              </div>
            )}

            <div className="border-t p-4">
              <div className="flex space-x-2">
                <Input
                  placeholder="–ù–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ..."
                  value={message}
                  onChange={(e) => setMessage(e.target.value)}
                  onKeyPress={(e) => e.key === 'Enter' && handleSendMessage()}
                  className="text-sm"
                />
                <Button size="sm" onClick={handleSendMessage} className="bg-primary hover:bg-primary/90">
                  <Icon name="Send" size={16} />
                </Button>
              </div>
              <div className="text-xs text-gray-500 mt-2 flex items-center">
                <Icon name="Shield" size={12} className="mr-1" />
                –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –∑–∞—â–∏—â–µ–Ω—ã
              </div>
            </div>
          </CardContent>
        )}
      </Card>
    </div>
  );
};

export default LiveChat;